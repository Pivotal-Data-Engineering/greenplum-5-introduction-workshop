<!DOCTYPE html>
	<html class="sl-root decks export offline loaded">
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<title>Distribution</title>

		<meta name="description" content="Distribution">

		<link rel="stylesheet" type="text/css" href="lib/offline-v2.css">



	</head>
	<body class="reveal-viewport theme-font-montserrat theme-color-white-blue">
		<div class="reveal">
			<div class="slides">
				<section data-background-image="distribution/d86771092cc9dc56a9bb31016bf63c3e.png" data-background-size="contain" data-id="dccaa282770514a359394f02ecd3e38b"></section><section data-background-image="distribution/a4225cd306eb68b9055fc43435ecb2da.png" data-background-size="contain" data-id="f2b664cb8cac1a161f0582441e9ec24e"></section><section data-background-image="distribution/05029ba5542941de1c5718cc9ba005ee.png" data-background-size="contain" data-id="15fdbda1fd6ef7e2c353d3f65e9bdeea"></section><section data-background-image="distribution/5ed95f8ee02ad7b2707ef3116bc7ba0e.png" data-background-size="contain" data-id="414c7ef1c8e89a22d95b5fa4fc53fa62"></section><section data-background-image="distribution/fecf9b0890f13c69ca6ec07bfd26fcf2.png" data-background-size="contain" data-id="62c490fa3c6c14aee4389fda84cbd253"></section><section data-background-image="distribution/b1c4bcef07ff9c528959614e07bc2ccf.png" data-background-size="contain" data-id="5a1714248fae214dd0e04fdf4696de89"></section><section data-background-image="distribution/d340f48dbf8ddb496d2e7d1e026fd901.png" data-background-size="contain" data-id="355f5b8281fdd4b129cf9029fc5fb915"></section><section data-background-image="distribution/f178e8f113c3e39783028175861168c3.png" data-background-size="contain" data-id="016712b0b14f9c76d6a4af66beb17ea4"></section><section data-background-image="distribution/b03f5063250f511bdc77489ccf5a3416.png" data-background-size="contain" data-id="e06a9654b228b75ad58421932dcf35ec"></section><section data-background-image="distribution/250e6e002036268ea54334f839e8f373.png" data-background-size="contain" data-id="c9b29f5fcdba643f2d4f6fd17860e95b"></section><section data-background-image="distribution/5abdd3c83a9711fa5ab9688d54ed7693.png" data-background-size="contain" data-id="746ab422ced8c4c4fd9603f8ede335b6"></section><section data-background-image="distribution/6f9eccec52c0b084a3373bdbb2621594.png" data-background-size="contain" data-id="63f4baa73cc35017d52dbf2792514232"></section><section data-background-image="distribution/29b3c94b2e4ef09229f11981e124edd0.png" data-background-size="contain" data-id="31bb0a3452ed4ac21dd5672eadc80b40"></section><section data-background-image="distribution/966d2ba87dc91876b378df8f7b038a65.png" data-background-size="contain" data-id="532dd470989e5637ffb23832783d3b8d"></section>
			</div>
		</div>

		<script>
			var SLConfig = {"deck": {"id":1578784,"slug":"distribution","title":"Distribution","description":"Distribution","width":960,"height":700,"visibility":"self","published_at":null,"sanitize_messages":null,"thumbnail_url":"https://s3.amazonaws.com/media-p.slid.es/thumbnails/f443d177b1397d5023e521e0b21e8a99/thumb.jpg?1566242295","view_count":0,"user":{"id":1047136,"username":"lwalstad-pivotal","name":null,"description":null,"thumbnail_url":"https://www.gravatar.com/avatar/8e257aa94b14c5462bb5651052f8e1c3?s=140\u0026d=https%3A%2F%2Fstatic.slid.es%2Fimages%2Fdefault-profile-picture.png","paid":true,"pro":false,"lite":true,"team_id":null,"settings":{"id":3098317,"present_controls":true,"present_upsizing":true,"present_pointer":false,"present_notes":true,"default_deck_tag_id":null}},"background_transition":"none","transition":"slide","theme_id":null,"theme_font":"montserrat","theme_color":"white-blue","auto_slide_interval":0,"comments_enabled":true,"forking_enabled":false,"rolling_links":false,"center":false,"shuffle":false,"should_loop":false,"share_notes":true,"slide_number":true,"slide_count":14,"rtl":false,"version":2,"collaborative":null,"deck_user_editor_limit":1,"data_updated_at":1566242513257,"font_typekit":null,"font_google":null,"time_limit":null,"upsizing_enabled":true,"notes":{"dccaa282770514a359394f02ecd3e38b":"","f2b664cb8cac1a161f0582441e9ec24e":"Every table in a Pivotal database has a data distribution method.  The DISTRIBUTED clause specifies the distribution method for a table.  There are two distribution methods either hash distribution which is designated by specifying a column name in the DISTRIBUTED BY clause or random distribution which is designated by specifying the DISTRIBUTED RANDOMLY clause. \nThe DISTRIBUTED BY (column name) clause will distribute the data across all segment instances using a hash algorithm.   \nThe DISTRIBUTED RANDOMLY clause will distribute the data across all segment instances using a random algorithm. \n","15fdbda1fd6ef7e2c353d3f65e9bdeea":"For large tables a hash distribution that evenly distributes table rows across all segment instances is desired. While a random distribution will evenly distribute table rows across all segments, the significant performance gains of local joins, also called co-located joins is lost. \n","414c7ef1c8e89a22d95b5fa4fc53fa62":"The DISTRIBUTED RANDOM clause will distribute the data across all segment instances using a random algorithm. For any table that uses a random distribution either a redistribution or broadcast operation will be required to perform a table join.   There are performance implications when performing a redistribution or broadcast of very large tables.  Random distribution should be used for small tables and when a hash distribution method is not feasible due to significant data skew. \n\n","62c490fa3c6c14aee4389fda84cbd253":"The DISTRIBUTED RANDOM clause will distribute the data across all segment instances using a random algorithm. For any table that uses a random distribution either a redistribution or broadcast operation will be required to perform a table join.   There are performance implications when performing a redistribution or broadcast of very large tables.  Random distribution should be used for small tables and when a hash distribution method is not feasible due to significant data skew. \n","5a1714248fae214dd0e04fdf4696de89":"Use a distribution key with unique values and high cardinality to distribute the data evenly across all segment instances. Boolean keys, for example True/False or 1/0, are not candidates for a distribution key as they will be distributed to two segment instances. Keys with low cardinality for example, Inactive/Active or Male/Female are not candidates for a distribution key. The system distributes rows with the same hash value to the same segment instance therefore resulting in the data being located on only two segment instances.  It is important to remember in an MPP environment overall response time for a query is measured by the completion time for all segment instances. \n\nData skew is caused by uneven distribution of data because of the wrong selection of distribution keys. It is present at the table level, can be easily identified and avoided by selecting optimal distribution keys. Computational skew happens in flight when query is executing and is not as easy to detect. It can happen for various operations like join, sort, aggregation, various OLAP operations, etc. with operations on columns that have low cardinality and non-uniform distribution. For example, If a row_number function is used on state column of customer table, it will result in more data flowing to segment that contains rows for ‘CA’, resulting in computational skew. Instead of 2 stage aggregation, one stage aggregation is picked by optimizer for columns with low cardinality. Computational skew is discussed in detail in the Appendix. \n\n\n\n\n","355f5b8281fdd4b129cf9029fc5fb915":"For large tables that are commonly joined together use the same distribution key to obtain local joins. A local join that is performed within the segment instance minimizes data movement and provides tremendous performance gains. When a local join is performed a segment instance operates independently of the other segment instances without network traffic or communication between segment instances. \n\nIn the point-of-sale example displayed the customer and freq_shopper table are very large tables and are commonly joined together on the customer_id in queries.  The customer_id is also unique and provides for an even distribution of data.  Therefore the same distribution key (customer_id) is used for both the customer and freq_shopper table to obtain the performance benefits of local joins. \nTo join the customer and freq_shopper tables each segment instance simply performs the following:\n1) scan the customer table that is already distributed on the join key and hashing it, 2) scan the freq_shopper table that is already distributed on the join key and hashing it, 3) perform a hash join operation between the two tables all locally within the segment instance without network activity. \n\n","016712b0b14f9c76d6a4af66beb17ea4":"To perform a local join matching rows must be located together on the same segment instance.  In the case where data was not distributed on the join key, a dynamic redistribution of the needed rows from one of the tables to another segment instance will be performed.  \nThere is a performance cost to redistributing data, that must be performed every time the join is required for a query.  Though the performance impact is minimal for small tables, avoid redistribution motion for very large tables when possible. \n\nIn the example displayed the customer table was distributed on the c_customer_id and the freq_shopper table was distributed on the f_trans_number.  To perform the join between the customer and freq_shopper table WHERE the customer.c_customer_id = freq_shopper.f_customer_id the freq_shopper table must be dynamically redistributed on the f_customer_id. \n","e06a9654b228b75ad58421932dcf35ec":"In some cases a broadcast motion will be performed rather than a redistribute motion.  In a broadcast motion every segment instance performs a broadcast (or sends) its own individual rows to all other segment instances.  This will result in every segment instance having its own complete and local copy of the entire table.  A broadcast motion may not be as optimal as a redistribute motion therefore the optimizer typically only selects a broadcast motion for very small tables. A broadcast motion is not acceptable for large tables. \n\nIn the example displayed the state table was distributed on the state_key and the customer table was distributed on the customer_id.  It was not feasible to distribute the customer table on the state_key because it would result in data skew and the customer table is commonly joined using the customer_id with other tables.  The customer table is very large and the state table is very small relative to the number of rows. The optimizer rather than redistributing the customer table decides to broadcast the state table. Each segment instance will send their individual rows from the state table to all other segment instances. Each segment instance will then have its own complete and local copy of the state table, to join with the customer table.\n","c9b29f5fcdba643f2d4f6fd17860e95b":"It is important that the distribution keys are the same data type to obtain a local join.  While the values might appear to be the same representatively, different data types are stored differently at the disk level and hash to different values resulting with like rows being stored on different segment instances. \n\nIn the example displayed, the customer table is distributed on the c_customer_id which is defined as type INT and the freq_shopper table also distributed on the f_customer_id is defined as type VARCHAR. This results in like rows (with the same customer_id respectively) being stored on different segment instances requiring a redistribution to perform the join.  Instead of a local join the optimizer redistributes the customer table based on the VARCHAR representation of the c_customer_id. A hash join is then performed using the same data type for both customer_id columns (customer.c_customer_id = varchar (freq_shopper.f_customer_id)). \n\n","746ab422ced8c4c4fd9603f8ede335b6":"For large tables a hash distribution that evenly distributes table rows across all segment instances is desired. While a random distribution will evenly distribute table rows across all segments, the significant performance gains of local joins, also called co-located joins is lost. \n","63f4baa73cc35017d52dbf2792514232":"The first query will return one row for each segment. The second query will return a single row for the table.\n","31bb0a3452ed4ac21dd5672eadc80b40":"","532dd470989e5637ffb23832783d3b8d":"A really simple example on a laptop test database. \n"}}};


			// Use local fonts
			SLConfig.fonts_url = 'lib/fonts/';
		</script>

		<script src="lib/reveal.min.js"></script>
		<script src="lib/offline.js"></script>

		<!-- Initialize the presentation -->
		<script>
			Reveal.initialize({
				width: 960,
				height: 700,
				margin: 0.05,
				

				hash: true,
				controls: true,
				progress: true,
				mouseWheel: false,
				showNotes: false,
				slideNumber: true,

				autoSlide: 0,
				autoSlideStoppable: true,

				center: false,
				shuffle: false,
				loop: false,
				rtl: false,

				transition: "slide",
				backgroundTransition: "none",

				highlight: {
					escapeHTML: false
				},

				dependencies: [
					{ src: 'lib/reveal-plugins/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'lib/reveal-plugins/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'lib/reveal-plugins/highlight/highlight.js' },
					{ src: 'lib/reveal-plugins/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'lib/reveal-plugins/zoom/zoom.js', async: true }
				]
			});
		</script>

		

	</body>
</html>

<!DOCTYPE html>
	<html class="sl-root decks export offline loaded">
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<title>Data Loading</title>

		<meta name="description" content="Data Loading">

		<link rel="stylesheet" type="text/css" href="lib/offline-v2.css">



	</head>
	<body class="reveal-viewport theme-font-montserrat theme-color-white-blue">
		<div class="reveal">
			<div class="slides">
				<section data-background-image="data-loading/b12b7f467cc4b52bc3d98b637324d113.jpg" data-background-size="contain" data-id="70d773d7e3d11f91b551398d32cf629f"></section><section data-background-image="data-loading/4d7452e95e2c2ebffcd9ef9b2a914e99.png" data-background-size="contain" data-id="19eb32169d212db0bcdb40905be4fb20"></section><section data-background-image="data-loading/e1f286b6eaabdfa5ba69e58b52a6d586.png" data-background-size="contain" data-id="7b214e9ca266ffd6a68ea73f15a61365"></section><section data-background-image="data-loading/79ec9dd32be2ea2099b403bfc415c0ad.png" data-background-size="contain" data-id="1bbd5b7d7260fd1b4d1a4f9a4a5c8d4c"></section><section data-background-image="data-loading/d0cf78205124fb80b6a6e069c0f812c3.png" data-background-size="contain" data-id="0af96878cfa45d2200f3f94342720bd4"></section><section data-background-image="data-loading/456946a3c71e5ff2585e7bcb1aeacf60.png" data-background-size="contain" data-id="cec6c793b879e0a91613b35bcb418a42"></section><section data-background-image="data-loading/451c853ae939328061706d25ef59b8a4.png" data-background-size="contain" data-id="4e0756f34a0a5875dd192a9d2e072dfb"></section><section data-background-image="data-loading/974837c25cb2b9dafef9026a7eb453c8.png" data-background-size="contain" data-id="dc345529ef5c5b1b3e014e9f19671eb6"></section><section data-background-image="data-loading/c04cafa6a688c0c35f743b4e1e596b24.png" data-background-size="contain" data-id="c8d50d39b1cb41b461d3d67ba1ed94fa"></section><section data-background-image="data-loading/5642265e4b6b761449433dbef14b2c18.png" data-background-size="contain" data-id="79c68b723d0507f6a9ac724f1ed8269a"></section><section data-background-image="data-loading/6e4068e43f6b8aeebea18224184d4594.png" data-background-size="contain" data-id="5ab57641fbfeab2dd5339aa364a5daaf"></section><section data-background-image="data-loading/2e8d7ae075193f40c72c5d643892b264.png" data-background-size="contain" data-id="c2e634c08548794d98dfe06fede16851"></section><section data-background-image="data-loading/a42da7addca81a3384b31897dfaef907.png" data-background-size="contain" data-id="0418c22363aa031f11c90cfcb51d967b"></section><section data-background-image="data-loading/9d6016ba0b3b8398ea39c65de73968b3.png" data-background-size="contain" data-id="48a6240f76e8d309f899a0e871c445f3"></section><section data-background-image="data-loading/1f78027ac0a2a983ff699b506ccc1197.png" data-background-size="contain" data-id="ee297054146651c1235fb767e0388570"></section><section data-background-image="data-loading/ba2ed91abc8d7fea986933c1db769a45.png" data-background-size="contain" data-id="fe745e74576673502784e601c113375d"></section><section data-background-image="data-loading/0780517cff82d8ace069e7ea518dc43e.png" data-background-size="contain" data-id="17a5b1ccdfa8050c72208c9ddeeb2999"></section><section data-background-image="data-loading/c32eccc5579bdd83b2047781763b844a.png" data-background-size="contain" data-id="4d1c0ac7f69e617cd9edf5b16d13b8c7"></section><section data-background-image="data-loading/7f7a89a52354b69132f1bb5a9e02b7ec.png" data-background-size="contain" data-id="5637e78e757059fc07483ce16fc2fcbb"></section><section data-background-image="data-loading/0afcd749f12ceb044a1f7291128fbf1d.png" data-background-size="contain" data-id="6782b56c25830634ad736f660df04a96"></section><section data-background-image="data-loading/b924c490401ce823cc3dc020019120e1.png" data-background-size="contain" data-id="707b09d6af6c02b500db17788c869a68"></section><section data-background-image="data-loading/d36c77eb065118b8479df36a14d50cef.png" data-background-size="contain" data-id="d758a86f6f372183f07146a7f27a29bc"></section><section data-background-image="data-loading/c3cc3d43895681f366a597d6b7175b0f.png" data-background-size="contain" data-id="546acfda691d0fd8662cbe2b7bc0bdaf"></section><section data-background-image="data-loading/710aad78f4c1fa4f611db36cedf70c11.png" data-background-size="contain" data-id="5fef026b56408d88663e4b6a773d3ec5"></section>
			</div>
		</div>

		<script>
			var SLConfig = {"deck": {"id":1578797,"slug":"data-loading","title":"Data Loading","description":"Data Loading","width":960,"height":700,"visibility":"self","published_at":null,"sanitize_messages":null,"thumbnail_url":"https://s3.amazonaws.com/media-p.slid.es/thumbnails/4d8e6acf95fdf36209221a4df8bb66ec/thumb.jpg?1565804806","view_count":0,"user":{"id":1047136,"username":"lwalstad-pivotal","name":null,"description":null,"thumbnail_url":"https://www.gravatar.com/avatar/8e257aa94b14c5462bb5651052f8e1c3?s=140\u0026d=https%3A%2F%2Fstatic.slid.es%2Fimages%2Fdefault-profile-picture.png","paid":true,"pro":false,"lite":true,"team_id":null,"settings":{"id":3098317,"present_controls":true,"present_upsizing":true,"present_pointer":false,"present_notes":true,"default_deck_tag_id":null}},"background_transition":"none","transition":"slide","theme_id":null,"theme_font":"montserrat","theme_color":"white-blue","auto_slide_interval":0,"comments_enabled":true,"forking_enabled":false,"rolling_links":false,"center":false,"shuffle":false,"should_loop":false,"share_notes":true,"slide_number":true,"slide_count":24,"rtl":false,"version":2,"collaborative":null,"deck_user_editor_limit":1,"data_updated_at":1566300140298,"font_typekit":null,"font_google":null,"time_limit":null,"upsizing_enabled":true,"notes":{"70d773d7e3d11f91b551398d32cf629f":"","19eb32169d212db0bcdb40905be4fb20":"Greenplum supports various methods for loading data into Greenplum Database. These include:\nExternal tables for data loading and unloading.\nThe gpfdist utility that is used in conjunction with external tables for parallel loads and unloads.\nThe gpload utility which acts as an interface to the external table parallel loading feature.\nThe gphdfs protocol, for parallel access to data stored within the Hadoop Distributed Filesytsem (HDFS).\nThe COPY command to efficiently load or unload small data sets directly through the GPDB master\nThe use of the SQL INSERT command to insert data into tables.\n","7b214e9ca266ffd6a68ea73f15a61365":"The COPY command:\nIs a PostgreSQL command that loads multiple rows in one command, instead of using a series of INSERT commands.\nIs optimized for loading large numbers of rows.\nIs less flexible than INSERT, but incurs significantly less overhead for large data loads. Since COPY is a single command, there is no need to disable autocommit if you use this method to populate a table. \nIt loads data from a file or from standard output.\nSupports error handling.\nThe table must already exist before copying to the table.\n","1bbd5b7d7260fd1b4d1a4f9a4a5c8d4c":"External tables utilize the parallel processing power of the segments for data loading.\nUnlike other loading mechanisms, you can access multiple data sources with one SELECT from an external table.\nThe data resides outside of the Greenplum Database.\nThere is a lot of flexibility when defining an external table as to where, how, and what data will be used.\nExternal tables are commonly used for ETL and data loading into the Greenplum Database.\n\nAs the demo showed, the load rate using the combination of gpfdist with an external table was about 500 times the load rate using single row inserts\n\n\n","0af96878cfa45d2200f3f94342720bd4":"Regular external tables:\nAccess static data and is rescannable.\nUses the file:// or gpfdist:// protocols. gpfdist is a file server program that serves files in parallel.\nWeb tables use the http:// protocol or EXECUTE clause to execute an operating system command or script. Data is assumed to be dynamic, meaning that query plans involving web tables do not allow rescanning as the data could change during the course of query execution. This can yield slower query plans as the data must be materialized to disk if cannot fit in memory.\nAccess HDFS data using the gphdfs protocol. Data can be text or a user-defined format.\n\nNote that, for data unloading, you can not use the file:// protocol.\n","cec6c793b879e0a91613b35bcb418a42":"File-based external tables allow you to access flat files as if they were database tables.\nWhen defining file-based external tables:\nYou can specify multiple external data sources or URIs (uniform resource identifiers) with the LOCATION clause, up to the number of primary segment instances in your Greenplum Database array.\nEach URI points to an external data file or data source. \nThe URIs do not need to exist prior to defining an external table.\nThe CREATE EXTERNAL TABLE command does not validate the URIs specified. You will get an error if the URI cannot be found when querying the external table.\n","4e0756f34a0a5875dd192a9d2e072dfb":"You may use only one of the following protocols for each external table you define – they can’t be mixed:\ngpfdist:// , gpfdists://, gphdfs://\nfile:// — If using the file:// protocol, the external data file or files must reside on a segment host in a location accessible by the Greenplum super user. \nOn a system with 8 primary segments, and you specify only 2 external files, you end up utilizing only ¼ of your segments at query time, so performance won’t be as good as if you’d defined 8 external files, one per primary segment.\n\n\n","dc345529ef5c5b1b3e014e9f19671eb6":"The parallel file distribution program, gpfdist:\nIs a C program which uses the HTTP protocol.\nCan be run on a server outside the Greenplum array.\nDistributes data at a rate of 200 MB/s per gpfdist executing on the system.\nDegree of parallelism be configured with the parameter: gp_external_max_segs.\nProvides full parallelism for the best performance.\ngpload is a data loading utility that acts as an interface to Greenplum’s external table parallel loading feature. Using a load specification defined in a YAML formatted control file, gpload executes a load by:\nInvoking the Greenplum parallel file server program.\nCreating an external table definition based on the source data defined.\nExecuting an INSERT, UPDATE or MERGE operation to load the source data into the target table in the database.\n","c8d50d39b1cb41b461d3d67ba1ed94fa":"In the example shown here, the parallel file distribution program is started and points to the directory, /var/load_files/expenses. Each instance opens a unique port number: port 8081 in the first example and port 8082 in the second.\nThe external table that is created connects to the parallel file distribution programs started on ports 8081 and 8082 of the server.\n\nRunning two gfdist processes per file system, and one per network interface (NIC), is recommended.\n","79c68b723d0507f6a9ac724f1ed8269a":"Here’s the common idiom for triggering the load from the external table.\n","5ab57641fbfeab2dd5339aa364a5daaf":"Here’s an example of using the “gphdfs” protocol to load the entire Wikipedia dump into GPDB.\nFirst, a MapReduce job was run against the bzipped XML dump file, to dump a tab-delimited version, one page per line, containing the page ID,\nTitle, timestamp, and the full text of the page.\nThis external table’s LOCATION clause uses a wildcard ‘*’ to point to all of the mapper output files (this was a map-only job).\nThe encoding is explicitly set to “UTF8”, and error handling has been configured.\n\nThere were 66 data formatting errors but, since that was well below the threshold of one percent, the load succeeded.\n\nThe entire load of Wikipedia took about ten seconds, because all 64 segments of this GPDB cluster were able to indpendently access the data in HDFS\nAnd load it in parallel.\n\n","c2e634c08548794d98dfe06fede16851":"Further detail on these parameters is available on gpdb.docs.pivotal.io, and you should be able to find it by searching for “GPDB One-time HDFS Protocol Installation”\nUsing a web search engine.\n\n","0418c22363aa031f11c90cfcb51d967b":"In this example, the YAML control file, load_faadata.yaml, defines how data from several source files is to be loaded into the faa2 database. It is assumed that the faadata.factontimeperformance and public.audit tables already exist within the database. A reject limit of 100 errors is defined for this load, with any errors redirected to the faadata.faadataerr table.\nBefore the load occurs, the table is truncated. The external table created as a result of this load will not be reused. Reusing a table is useful if you are performing trickle loads or need to reduce system catalog bloat, which can occur when creating and dropping multiple temporary tables. By reusing the table, the table is not destroyed and recreated.\n","48a6240f76e8d309f899a0e871c445f3":"The gpload utility is executed with the following syntax:\ngpload –f control_name\nThe command will display the gpfdist command that was issued.\nOnce the external table has been created, data is automatically loaded into the target database table specified in the control file.\ngpload display the number of rows inserted, updated, as well as the number of errors encountered.\n \nIf the user is not specified on the command line, with the “-U” option, gpload will extract the user from one of the following in the order shown: the load control file, the environment variable $PGUSER or the login of the user running the command.\nAs with the user, if the password is not specified on the command line, gpload will extract the password from the following in the order specified: $PGPASSWORD variable, the password file specified by $PGPASSFILE or ~/.pgpass; if none of these contain the password, you will be prompted.\n","ee297054146651c1235fb767e0388570":"Once the control file has been created, issuing the gpload command starts a chain of events:\nThe gpfdist program is started.\ngpload creates the external table based on the YAML file.\nThe data is loaded using INSERT, as specified in the YAML file.\n","fe745e74576673502784e601c113375d":"In the first example shown on the slide, an external web table is defined using the HTTP protocol. Three different URLs are associated with the external table, all using the CSV format.\nThe second example shows how to define an external table to a script. The script:\nMust be located on all segments in the same location.\nMust be executable by the superuser account.\nWill execute by one segment on each segment host.\nExecutes in parallel on all segments.\n","17a5b1ccdfa8050c72208c9ddeeb2999":"In the third example, the external table is created on the command, df -k. The command is executed by each primary segment.\n","4d1c0ac7f69e617cd9edf5b16d13b8c7":"When an external table command is executed, that command is executed from within the database and not from a login shell. If you rely on environment variables in external web table commands, such as the $PATH variable, keep in mind that the .bashrc or .profile of the current user will not be sourced at the segment host. You can set desired environment variables from within the EXECUTE clause of your external web table definition as follows:\nCREATE EXTERNAL WEB TABLE ext_table (…) EXECUTE 'export PATH=/usr/sbin‘\n\nNote that you can disable the use of the EXECUTE command in web table definitions by setting the parameter, gp_external_enable_exec, to off in the postgresql.conf file.\n","5637e78e757059fc07483ce16fc2fcbb":"The Greenplum Database variables shown in the table are available to operating system commands executed by an external table. These variables are set as environment variables in the shell that executes the external table command(s). They can be used to identify a set of requests made by an external table statement, at runtime, across the Greenplum Database array of hosts and segment instances.\n","6782b56c25830634ad736f660df04a96":"External Table EXECUTE Variables (Continued)\n","707b09d6af6c02b500db17788c869a68":"The most common use of external tables is to facilitate loading of data. This is typically done by issuing a CREATE TABLE AS SELECT or INSERT INTO SELECT command, where the SELECT statement triggers the flow of data. \nBy default, if the external table data contains an error, the entire command fails and no data is loaded into the target database table. To isolate data errors in external table data while still loading correctly formatted rows:\nYou define an external table with a SEGMENT REJECT LIMIT clause.\nSpecify the number of error rows acceptable, on a per-segment basis, after which the entire external table operation will be aborted and no rows will be processed or loaded.\nNote that the count of error rows is per-segment, not per entire operation. The following conditions then apply:\nIf the per-segment reject limit is not reached, all rows that do not contain an error will be processed.\nIf the limit is not reached, all good rows will be processed and any error rows discarded.\nIf you would like to keep error rows for further examination, you can optionally declare an error table using the LOG ERRORS INTO clause. Any rows containing a format error would then be logged to the specified error table. \n","d758a86f6f372183f07146a7f27a29bc":"Query planning of complex queries involving external tables is not optimal because:\nThere are no statistics to help the query planner choose a good plan.\nThe data is not in the database.\nExternal tables are really not meant to be used in frequent, ad-hoc queries.\n\n","546acfda691d0fd8662cbe2b7bc0bdaf":""}}};


			// Use local fonts
			SLConfig.fonts_url = 'lib/fonts/';
		</script>

		<script src="lib/reveal.min.js"></script>
		<script src="lib/offline.js"></script>

		<!-- Initialize the presentation -->
		<script>
			Reveal.initialize({
				width: 960,
				height: 700,
				margin: 0.05,
				

				hash: true,
				controls: true,
				progress: true,
				mouseWheel: false,
				showNotes: true,
				slideNumber: true,

				autoSlide: 0,
				autoSlideStoppable: true,

				center: false,
				shuffle: false,
				loop: false,
				rtl: false,

				transition: "slide",
				backgroundTransition: "none",

				highlight: {
					escapeHTML: false
				},

				dependencies: [
					{ src: 'lib/reveal-plugins/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'lib/reveal-plugins/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'lib/reveal-plugins/highlight/highlight.js' },
					{ src: 'lib/reveal-plugins/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'lib/reveal-plugins/zoom/zoom.js', async: true }
				]
			});
		</script>

		

	</body>
</html>
